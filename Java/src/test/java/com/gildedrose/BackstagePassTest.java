package com.gildedrose;import org.junit.jupiter.api.Test;import static org.hamcrest.core.Is.is;import static org.junit.Assert.assertThat;import static org.junit.jupiter.api.Assertions.*;class BackstagePassTest {    @Test    void should_quality_incr_by_1__and_quality_not_bigger_than_50_and_sellIn_decr_by_1_when_update_given_sellIn_between_10_50_and_quality_between_0_49() {        for (int quality = 0; quality <= 49; quality++) {            for (int sellIn = 10; sellIn <= 50; sellIn++) {                int oldSellIn = sellIn, oldQuality = quality;                Item item = new AgedBrie(sellIn, quality);                item.passOneDay();                assertThat(item.quality, is(oldQuality + 1));                assertThat(item.sellIn, is(oldSellIn - 1));            }        }    }    @Test    void should_quality_equals_50_and_sellIn_decr_by_1_when_update_given_sellIn_between_11_50_and_quality_equals_50() {        for (int sellIn = 11; sellIn <= 50; sellIn++) {            int oldSellIn = sellIn, oldQuality = 50;            Item item = new BackstagePass(sellIn, 50);            item.passOneDay();            assertThat(item.quality, is(50));            assertThat(item.sellIn, is(oldSellIn - 1));        }    }    @Test    void should_quality_incr_by_2_and_quality_not_bigger_than_50_and_sellIn_decr_by_1_when_update_given_sellIn_between_6_10_and_quality_between_0_48() {        for (int quality = 0; quality <= 48; quality++) {            for (int sellIn = 6; sellIn <= 10; sellIn++) {                int oldSellIn = sellIn, oldQuality = quality;                Item item = new BackstagePass(sellIn, quality);                item.passOneDay();                assertThat(item.quality, is(oldQuality + 2));                assertThat(item.sellIn, is(oldSellIn - 1));            }        }    }    @Test    void should_quality_equals_50_and_sellIn_decr_by_1_when_update_given_sellIn_between_6_10_and_quality_equals_49() {        for (int sellIn = 6; sellIn <= 10; sellIn++) {            int oldSellIn = sellIn;            Item item = new BackstagePass(sellIn, 49);            item.passOneDay();            assertThat(item.quality, is(50));            assertThat(item.sellIn, is(oldSellIn - 1));        }    }    @Test    void should_quality_incr_by_3_and_quality_not_bigger_than_50_and_sellIn_decr_by_1_when_update_given_sellIn_between_1_5_and_quality_between_0_47() {        for (int quality = 0; quality <= 47; quality++) {            for (int sellIn = 1; sellIn <= 5; sellIn++) {                int oldSellIn = sellIn, oldQuality = quality;                Item item = new BackstagePass(sellIn, quality);                item.passOneDay();                assertThat(item.quality, is(oldQuality + 3));                assertThat(item.sellIn, is(oldSellIn - 1));            }        }    }    @Test    void should_quality_equals_50_and_sellIn_decr_by_1_when_update_given_sellIn_between_1_5_and_quality_equals_48() {        for (int sellIn = 1; sellIn <= 5; sellIn++) {            int oldSellIn = sellIn;            Item item = new BackstagePass(sellIn, 48);            item.passOneDay();            assertThat(item.quality, is(50));            assertThat(item.sellIn, is(oldSellIn - 1));        }    }    @Test    void should_quality_equals_0_and_sellIn_decr_by_1_when_update_given_sellIn_between_negative10_0_and_quality_between_0_50() {        for (int quality = 0; quality <= 50; quality++) {            for (int sellIn = -10; sellIn <= 0; sellIn++) {                int oldSellIn = sellIn, oldQuality = quality;                Item item = new BackstagePass(sellIn, quality);                item.passOneDay();                assertThat(item.quality, is(0));                assertThat(item.sellIn, is(oldSellIn - 1));            }        }    }}