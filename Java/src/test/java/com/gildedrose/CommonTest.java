package com.gildedrose;import org.junit.jupiter.api.Test;import static org.hamcrest.core.Is.is;import static org.junit.Assert.assertThat;import static org.junit.jupiter.api.Assertions.*;class CommonTest {    @Test    void should_quality_desc_by_1_and_quality_not_less_than_0_and_sellIn_desc_by_1_when_update_given_sellIn_1_51_and_quality_between_1_50() {        for (int quality = 1; quality <= 50; quality++) {            for (int sellIn = 1; sellIn <= 51; sellIn++) {                int oldSellIn = sellIn, oldQuality = quality;                Item item = new Common("ss", sellIn, quality);                item.passOneDay();                assertThat(item.quality,is(oldQuality-1));                assertThat(item.sellIn,is(oldSellIn-1));            }        }    }    @Test    void should_quality_equals_0_and_sellIn_desc_by_1_when_update_given_sellIn_1_51_and_quality_equals_0() {        for (int sellIn = 0; sellIn <= 51; sellIn++) {            int oldSellIn = sellIn;            Item item = new Common("ss", sellIn, 0);            item.passOneDay();            assertThat(item.quality,is(0));            assertThat(item.sellIn,is(oldSellIn-1));        }    }    @Test    void should_quality_desc_by_2_and_sellIn_decr_by_1_when_update_given_sellIn_negative26_0_and_quality_between_2_50() {        for (int quality = 2; quality <= 50; quality++) {            for (int sellIn = -26; sellIn <= 0; sellIn++) {                int oldSellIn = sellIn, oldQuality = quality;                Item item = new Common("ss", sellIn, quality);                item.passOneDay();                assertThat(item.quality,is(oldQuality-2));                assertThat(item.sellIn,is(oldSellIn-1));            }        }    }    @Test    void should_quality_equals_0_and_sellIn_decr_by_1_when_update_given_sellIn_negative26_0_and_quality_equals_1() {        for (int sellIn = -26; sellIn <= 0; sellIn++) {            int oldSellIn = sellIn;            Item item = new Common("ss", sellIn, 1);            item.passOneDay();            assertThat(item.quality,is(0));            assertThat(item.sellIn,is(oldSellIn-1));        }    }}