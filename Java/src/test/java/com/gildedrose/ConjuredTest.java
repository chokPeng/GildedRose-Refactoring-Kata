package com.gildedrose;import org.junit.jupiter.api.Test;import static org.hamcrest.core.Is.is;import static org.junit.Assert.assertThat;import static org.junit.jupiter.api.Assertions.*;class ConjuredTest {    @Test    void should_quality_desc_by_2_and_sellIn_decr_by_1_when_update_given_sellIn_between_1_51_and_quality_between_2_51() {        for (int quality = 2; quality <= 51; quality++) {            for (int sellIn = 1; sellIn <= 51; sellIn++) {                int oldSellIn = sellIn, oldQuality = quality;                Item item = new Conjured(sellIn, quality);                item.passOneDay();                assertThat(item.quality,is(oldQuality-2));                assertThat(item.sellIn,is(oldSellIn-1));            }        }    }    @Test    void should_quality_equals_0_and_sellIn_decr_by_1_when_update_given_sellIn_between_1_51_and_quality_between_0_2() {        for (int quality = 0; quality <= 2; quality++) {            for (int sellIn = 1; sellIn <= 51; sellIn++) {                int oldSellIn = sellIn;                Item item = new Conjured(sellIn, quality);                item.passOneDay();                assertThat(item.quality,is(0));                assertThat(item.sellIn,is(oldSellIn-1));            }        }    }    @Test    void should_quality_desc_by_4_and_sellIn_decr_by_1_when_update_given_sellIn_between_negative13_0_and_quality_between_5_50() {        for (int quality = 5; quality <= 50; quality++) {            for (int sellIn = -13; sellIn <= 0; sellIn++) {                int oldSellIn = sellIn, oldQuality = quality;                Item item = new Conjured(sellIn, quality);                item.passOneDay();                assertThat(item.quality,is(oldQuality-4));                assertThat(item.sellIn,is(oldSellIn-1));            }        }    }    @Test    void should_quality_equals_0_and_sellIn_decr_by_1_when_update_given_sellIn_between_negative13_0_and_quality_between_0_4() {        for (int quality = 0; quality <= 4; quality++) {            for (int sellIn = -13; sellIn <= 0; sellIn++) {                int oldSellIn = sellIn;                Item item = new Conjured(sellIn, quality);                item.passOneDay();                assertThat(item.quality,is(0));                assertThat(item.sellIn,is(oldSellIn-1));            }        }    }}