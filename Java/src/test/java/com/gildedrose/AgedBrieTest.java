package com.gildedrose;import org.junit.jupiter.api.Test;import java.util.Queue;import static org.junit.jupiter.api.Assertions.*;class AgedBrieTest {    @Test    void should_quality_equals_50_and_sellIn_decr_by_1_when_update_given_sellIn_between_negative51_0_and_quality_equals_49() {            for (int sellIn = -51; sellIn <= 0; sellIn++) {                int oldSellIn = sellIn;                Item item = new AgedBrie(sellIn, 49);                item.updateQuality();                item.updateSellIn();                assert (item.quality ==50);                assert (item.sellIn == oldSellIn - 1);            }    }    @Test    void should_quality_equals_50_and_sellIn_decr_by_1_when_update_given_sellIn_between_1_51_and_quality_equals_50() {            for (int sellIn = 1; sellIn <= 51; sellIn++) {                int oldSellIn = sellIn, oldQuality = 50;                Item item = new AgedBrie(oldSellIn, 50);                item.updateQuality();                item.updateSellIn();                assert (item.quality == 50);                assert (item.sellIn == oldSellIn - 1);            }    }    @Test    void should_quality_incr_by_1_and_sellIn_decr_by_1_when_update_given_sellIn_between_1_51_and_quality_between_1_49()        {            for (int quality = 1; quality <= 49; quality++) {                for (int sellIn = 1; sellIn <= 51; sellIn++) {                    int oldSellIn = sellIn, oldQuality = quality;                    Item item = new AgedBrie(oldSellIn, quality);                    item.updateQuality();                    item.updateSellIn();                    assert (item.quality == oldQuality + 1);                    assert (item.sellIn == oldSellIn - 1);                }            }        }    @Test    void should_quality_incr_by_2_and_quality_not_bigger_than_50_and_sellIn_decr_by_1_when_update_given_sellIn_between_negative51_0_and_quality_between_0_48() {        for (int quality = 0; quality <= 48; quality++) {            for (int sellIn = -51; sellIn <= 0; sellIn++) {                int oldSellIn = sellIn, oldQuality = quality;                Item item = new AgedBrie(oldSellIn, quality);                item.updateQuality();                item.updateSellIn();                assert (item.quality == oldQuality + 2);                assert (item.sellIn == oldSellIn - 1);            }        }    }}